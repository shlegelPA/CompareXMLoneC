&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	 
	ДеревоИзменений = Новый ДеревоЗначений;
	ДеревоИзменений.Колонки.Добавить("Объект");
	ДеревоИзменений.Колонки.Добавить("ВерсияXML1");
	ДеревоИзменений.Колонки.Добавить("ВерсияXML2");
	ДеревоИзменений.Колонки.Добавить("ОбъектСвойство");
	ДеревоИзменений.Колонки.Добавить("ВерсияXML1Свойство");
	ДеревоИзменений.Колонки.Добавить("ВерсияXML2Свойство");
	ДеревоИзменений.Колонки.Добавить("ВерсияXMLИсходящая");
	ДеревоИзменений.Колонки.Добавить("ИзменениеВерсии1", Новый ОписаниеТипов("Число"));
	ДеревоИзменений.Колонки.Добавить("ИзменениеВерсии2", Новый ОписаниеТипов("Число"));
	ДеревоИзменений.Колонки.Добавить("ИмяСтрокой");
	ДеревоИзменений.Колонки.Добавить("ВзятьИзОбъекта");
	ДеревоИзменений.Колонки.Добавить("ВзятьИзВерсии1");
	ДеревоИзменений.Колонки.Добавить("ВзятьИзВерсии2");
	ДеревоИзменений.Колонки.Добавить("ПропуститьПроверку");
	
	
	АдресДерева = ПоместитьВоВременноеХранилище(ДеревоИзменений, ЭтаФорма.УникальныйИдентификатор);
	
	КаталогРепозитория = "<Выберите папку с GIT-Репозиторием проекта>";
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Вложения = Новый Структура;
	Описание = Обработка.ПолучитьМакет("Макет");
	ОписаниеОбработки.УстановитьHTML(Описание.ПолучитьТекст(), Вложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	СформироватьДеревоЗначений();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРаботаСДанными;
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоЗначений()
	
	ДеревоИзменений = ПолучитьИзВременногоХранилища(АдресДерева);
	ДеревоИзменений.Строки.Очистить();
	
	ЗаполнитьДеревоОбщимПредком(ДеревоИзменений);
		
	ЗначениеВРеквизитФормы(ДеревоИзменений, "ДеревоИзмененийФормы");
	АдресДерева = ПоместитьВоВременноеХранилище(ДеревоИзменений, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОбщимПредком(Дерево)
	
	ОбъектЧтения = ПрочитатьXMLвXDTO(Объект.ОбщийПредокXML);
	
	Корень = Дерево.Строки.Добавить();
	Корень.Объект = ОбъектЧтения;
	Корень.ИмяСтрокой = "Корень";
	
	ПрочитатьXDTOвДеревоРекурсивно(Корень, ОбъектЧтения);
	
	ВерсияЧтения = ПрочитатьXMLвXDTO(Объект.ВерсияXML1);
	Корень.ВерсияXML1 = ВерсияЧтения;
	ПрочитатьXDTOвДеревоРекурсивно(Корень, ВерсияЧтения, "ВерсияXML1");
	
	Если ЗначениеЗаполнено(Объект.ВерсияXML2) Тогда
		ВерсияЧтения = ПрочитатьXMLвXDTO(Объект.ВерсияXML2);
		Корень.ВерсияXML2 = ВерсияЧтения;
		ПрочитатьXDTOвДеревоРекурсивно(Корень, ВерсияЧтения, "ВерсияXML2");
	КонецЕсли;
	
	СобратьИсходящееДеревоРекурсивно(Дерево);
	
КонецПроцедуры

&НаСервере
Процедура СобратьИсходящееДеревоРекурсивно(Дерево)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Строка.ВзятьИзВерсии2 = Ложь;
		Строка.ВзятьИзВерсии1 = Ложь;
		Строка.ВзятьИзОбъекта = Ложь;
		
		Если ЭтоПростойТип(Строка.Объект) 
			И ЭтоПростойТип(Строка.ВерсияXML2) 
			И ЭтоПростойТип(Строка.ВерсияXML1) Тогда
			
			Если Строка.Объект = Строка.ВерсияXML1 И Строка.Объект <> Строка.ВерсияXML2 Тогда
				Строка.ВерсияXMLИсходящая = Строка.ВерсияXML2;
				Строка.ВзятьИзВерсии2 = Истина;
				Строка.ИзменениеВерсии2 = 1;
				ДобавитьИзменениеРодителю(Строка, "ИзменениеВерсии2");
			ИначеЕсли Строка.Объект <> Строка.ВерсияXML1 И Строка.Объект = Строка.ВерсияXML2 Тогда
				Строка.ВерсияXMLИсходящая = Строка.ВерсияXML1;
				Строка.ВзятьИзВерсии1 = Истина;
				Строка.ИзменениеВерсии1 = 1;
				ДобавитьИзменениеРодителю(Строка, "ИзменениеВерсии1");
			ИначеЕсли Строка.Объект = Строка.ВерсияXML1 И Строка.Объект = Строка.ВерсияXML2 Тогда
				Строка.ВерсияXMLИсходящая = Строка.Объект;
				Строка.ВзятьИзОбъекта = Истина;
			КонецЕсли;
			
		Иначе
			
			Если Строка.ВерсияXML1 <> Неопределено И Строка.Объект <> Неопределено И Строка.ВерсияXML2 = Неопределено Тогда
				Строка.ВерсияXMLИсходящая = Строка.ВерсияXML2;
				Строка.ВзятьИзВерсии2 = Истина;
				Строка.ИзменениеВерсии2 = 1;
				ДобавитьИзменениеРодителю(Строка, "ИзменениеВерсии2");
			ИначеЕсли Строка.ВерсияXML1 = Неопределено И Строка.ВерсияXML2 <> Неопределено Тогда
				Строка.ВерсияXMLИсходящая = Строка.ВерсияXML2;
				Строка.ВзятьИзВерсии2 = Истина;
				Строка.ИзменениеВерсии2 = 1;
				ДобавитьИзменениеРодителю(Строка, "ИзменениеВерсии2");
			ИначеЕсли Строка.ВерсияXML1 <> Неопределено И Строка.Объект = Неопределено И Строка.ВерсияXML2 = Неопределено Тогда
				Строка.ВерсияXMLИсходящая = Строка.ВерсияXML1;
				Строка.ВзятьИзВерсии1 = Истина;
				Строка.ИзменениеВерсии1 = 1;
				ДобавитьИзменениеРодителю(Строка, "ИзменениеВерсии1");
			ИначеЕсли Строка.ВерсияXML1 <> Неопределено И Строка.ВерсияXML2 <> Неопределено И Строка.Объект <> Неопределено Тогда
				Строка.ВерсияXMLИсходящая = Строка.Объект;
				Строка.ВзятьИзОбъекта = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		СобратьИсходящееДеревоРекурсивно(Строка);
		//Строка.Строки.Сортировать("ИмяСтрокой");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьXDTOвДеревоРекурсивно(ЭлементДерева, ЭлементXDTO, ЗаполнитьВерсию = "Объект")
	
	Если ТипЗнч(ЭлементXDTO) = Тип("ОбъектXDTO") Тогда
		Для Каждого Свойство Из ЭлементXDTO.Свойства() Цикл
			ИзменяемаяСтрокаДерева = ДобавитьВДерево(ЭлементДерева, ЭлементXDTO[Свойство.Имя], Свойство, ЗаполнитьВерсию, Свойство.Имя);
			ПрочитатьXDTOвДеревоРекурсивно(ИзменяемаяСтрокаДерева, ЭлементXDTO[Свойство.Имя], ЗаполнитьВерсию);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ЭлементXDTO) = Тип("СписокXDTO") Тогда
		НумераторСписка = 1;
		Для Каждого ЭлементСписка Из ЭлементXDTO Цикл
			ИзменяемаяСтрокаДерева = ДобавитьВДерево(ЭлементДерева, ЭлементСписка, ЭлементXDTO.ВладеющееСвойство, ЗаполнитьВерсию,,НумераторСписка);
			ПрочитатьXDTOвДеревоРекурсивно(ИзменяемаяСтрокаДерева, ЭлементСписка, ЗаполнитьВерсию);
			НумераторСписка = НумераторСписка + 1;
		КонецЦикла;
	//Иначе
		//ДобавитьВДерево(ЭлементДерева, ЭлементXDTO, ЗаполнитьВерсию);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ДобавитьВДерево(ЭлементДерева, ЭлементXDTO, Свойство = Неопределено, ЗаполнитьВерсию, ИмяСтрокой = "", НумераторСписка = 0)
	
	Если Не ЗначениеЗаполнено(ИмяСтрокой) Тогда
		ИмяСтрокой = ПолучитьИмяXDTO(ЭлементXDTO, НумераторСписка);
	КонецЕсли;
	
	Если ЗаполнитьВерсию <> "Объект" Тогда
		СтрокаДерева = ЭлементДерева.Строки.Найти(ИмяСтрокой, "ИмяСтрокой");
	КонецЕсли;
	
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ЭлементДерева.Строки.Добавить();
		СтрокаДерева.ИмяСтрокой = ИмяСтрокой;
	КонецЕсли;
	
	СтрокаДерева[ЗаполнитьВерсию] = ЭлементXDTO;
	СтрокаДерева[ЗаполнитьВерсию + "Свойство"] = Свойство;	
	Возврат СтрокаДерева;
			
КонецФункции

&НаСервере
Функция ПолучитьИмяXDTO(ЭлементXDTO, НумераторСписка)
	
	Если ТипЗнч(ЭлементXDTO) = Тип("СвойствоXDTO") Тогда
		
		Возврат ЭлементXDTO.Имя;
		
	ИначеЕсли ТипЗнч(ЭлементXDTO) = Тип("ОбъектXDTO") Тогда
		
		Если ЭлементXDTO.Свойства().Получить("name") <> Неопределено Тогда
			Возврат ЭлементXDTO.name;
		ИначеЕсли ЭлементXDTO.Свойства().Получить("uuid") <> Неопределено Тогда
			Возврат ЭлементXDTO.uuid;
		Иначе
			Постфикс = ?(НумераторСписка = 0, "", "#№_" + Строка(НумераторСписка));
			Возврат ЭлементXDTO.ВладеющееСвойство().Имя + Постфикс;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементXDTO) = Тип("СписокXDTO") Тогда
		
		Возврат ЭлементXDTO.ВладеющееСвойство.Имя;
		
	Иначе
		Возврат ЭлементXDTO;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПрочитатьXMLвXDTO(XML)
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XML);
	
	Возврат ПолучитьФабрикуКонфигурации().ПрочитатьXML(Чтение);
	
КонецФункции

&НаСервере
Процедура ДобавитьИзменениеРодителю(СтрокаДерева, ИзменениеВерсии)
	Если СтрокаДерева.Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаДерева.Родитель[ИзменениеВерсии] = СтрокаДерева.Родитель[ИзменениеВерсии] + 1;
	ДобавитьИзменениеРодителю(СтрокаДерева.Родитель, ИзменениеВерсии);
	
КонецПроцедуры

&НаСервере
Функция ЭтоПростойТип(Значение)
	Возврат ТипЗнч(Значение) = Тип("Строка") 
			ИЛИ ТипЗнч(Значение) = Тип("Число") 
			ИЛИ ТипЗнч(Значение) = Тип("Булево") 
			ИЛИ Значение = Неопределено;
КонецФункции




#Область РаботаСGIT

&НаКлиенте
Процедура КаталогРепозиторияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Описание = Новый ОписаниеОповещения("ВыборКаталога_Завершение", ЭтаФорма);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталога_Завершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КаталогРепозитория = Результат[0];
	
	ПолучитьСписокФайловСКонфликтами();
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьКомандуGIT(КомандаGIT)
	
	ФайлОтветаGIT = ПолучитьИмяВременногоФайла(); 
	
	//Описание = Новый ОписаниеОповещения("ВыполнитьКомандуGIT_Завершение", ЭтаФорма, ДополнительныеПараметры);
	КомандаСистемы("git " + КомандаGIT + " > " + ФайлОтветаGIT, КаталогРепозитория);
	
	Попытка
		Текст = Новый ЧтениеТекста();
		Текст.Открыть(ФайлОтветаGIT, КодировкаТекста.UTF8);
		Ответ = Новый Массив;
		Строка = "";
		Пока Истина Цикл
			Строка = Текст.ПрочитатьСтроку();
			Если Строка = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Ответ.Добавить(Строка);
			
		КонецЦикла;
		Текст.Закрыть();
		
		УдалитьФайлы(ФайлОтветаGIT);
		
		Возврат Ответ;
		
	Исключение
		ВызватьИсключение("Ошибка исполнения команды GIT: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСписокФайловСКонфликтами(Команда = Неопределено)
	
	Если Не ЗначениеЗаполнено(КаталогРепозитория) ИЛИ КаталогРепозитория = "<Выберите папку с GIT-Репозиторием проекта>" Тогда
		ПоказатьОповещениеПользователя("Не выбран каталог",,"Не выбран каталог репозитория GIT.");
		Возврат;
	КонецЕсли;
	
	
	Ответ = ВыполнитьКомандуGIT("diff --name-only --diff-filter=U");
	
	СписокФайловСКонфликтами.Очистить();
	Для Каждого Путь Из Ответ Цикл
		
		Файл = Новый Файл(Путь);
		НоваяСтрока = СписокФайловСКонфликтами.Добавить();
		НоваяСтрока.Имя = файл.ИмяБезРасширения;
		НоваяСтрока.Расширение = Файл.Расширение;
		НоваяСтрока.Путь = Файл.Путь;
		НоваяСтрока.ПолныйПуть = Путь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьВерсииФайла(Команда = Неопределено)
	
	ТекущийВыбор = Элементы.СписокФайловСКонфликтами.ТекущиеДанные;
	Если ТекущийВыбор = Неопределено Тогда
		ПоказатьОповещениеПользователя("Не выбран файл",,"Выделите строку с файлом в списке файлов.");
		Возврат;
	КонецЕсли;
	
	Ответ = ВыполнитьКомандуGIT("show -s --format=%H HEAD");
	КоммитТекущейВетки = Ответ[0];
	
	Ответ = ВыполнитьКомандуGIT("show -s --format=%H MERGE_HEAD");
	КоммитВходящейВетки = Ответ[0];
	
	Ответ = ВыполнитьКомандуGIT("merge-base HEAD MERGE_HEAD");
	РодительскийКоммит = Ответ[0];
	
	Объект.ВерсияXML1 = "";
	Объект.ВерсияXML2 = "";
	Объект.ОбщийПредокXML = "";
	
	Ответ = ВыполнитьКомандуGIT("show --textconv " + КоммитТекущейВетки + ":" + ТекущийВыбор.ПолныйПуть);
	Для Каждого СтрокаОтвета Из Ответ Цикл
		Объект.ВерсияXML1 = Объект.ВерсияXML1 + СтрокаОтвета + Символы.ПС;
	КонецЦикла;
	
	Ответ = ВыполнитьКомандуGIT("show --textconv " + КоммитВходящейВетки + ":" + ТекущийВыбор.ПолныйПуть);
	Для Каждого СтрокаОтвета Из Ответ Цикл
		Объект.ВерсияXML2 = Объект.ВерсияXML2 + СтрокаОтвета + Символы.ПС;
	КонецЦикла;
	
	Ответ = ВыполнитьКомандуGIT("show --textconv " + РодительскийКоммит + ":" + ТекущийВыбор.ПолныйПуть);
	Для Каждого СтрокаОтвета Из Ответ Цикл
		Объект.ОбщийПредокXML = Объект.ОбщийПредокXML + СтрокаОтвета + Символы.ПС;
	КонецЦикла;
	
	СформироватьДеревоЗначений();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРаботаСДанными;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловСКонфликтамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СравнитьВерсииФайла();
КонецПроцедуры

#КонецОбласти




#Область РаботаСДеревом

&НаКлиенте
Процедура ДеревоИзмененийВзятьИзОбъектаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоИзменений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ВзятьИзОбъекта Тогда
		ТекущиеДанные.ВзятьИзОбъекта = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВзятьИзВерсии1 = НЕ ТекущиеДанные.ВзятьИзОбъекта;
	ТекущиеДанные.ВзятьИзВерсии2 = НЕ ТекущиеДанные.ВзятьИзОбъекта;
	ТекущиеДанные.ПропуститьПроверку = НЕ ТекущиеДанные.ВзятьИзОбъекта;
	
	ТекущиеДанные.ВерсияXMLИсходящая = ТекущиеДанные.Объект;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИзмененийВзятьИзВерсии1ПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоИзменений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ВзятьИзВерсии1 Тогда
		ТекущиеДанные.ВзятьИзВерсии1 = Истина;
		Возврат;
	КонецЕсли;
	
	
	ТекущиеДанные.ВзятьИзОбъекта = НЕ ТекущиеДанные.ВзятьИзВерсии1;
	ТекущиеДанные.ВзятьИзВерсии2 = НЕ ТекущиеДанные.ВзятьИзВерсии1;
	ТекущиеДанные.ПропуститьПроверку = НЕ ТекущиеДанные.ВзятьИзВерсии1;
	
	ТекущиеДанные.ВерсияXMLИсходящая = ТекущиеДанные.ВерсияXML1;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИзмененийВзятьИзВерсии2ПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоИзменений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ВзятьИзВерсии2 Тогда
		ТекущиеДанные.ВзятьИзВерсии2 = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВзятьИзОбъекта = НЕ ТекущиеДанные.ВзятьИзВерсии2;
	ТекущиеДанные.ВзятьИзВерсии1 = НЕ ТекущиеДанные.ВзятьИзВерсии2;
	ТекущиеДанные.ПропуститьПроверку = НЕ ТекущиеДанные.ВзятьИзВерсии2;
	
	ТекущиеДанные.ВерсияXMLИсходящая = ТекущиеДанные.ВерсияXML2;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИзмененийПропуститьПроверкуПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоИзменений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПропуститьПроверку Тогда
		ТекущиеДанные.ПропуститьПроверку = Истина;
		Возврат;
	КонецЕсли;

	Описание = Новый ОписаниеОповещения("ПропуститьПроверкуИзменение_Завершение", ЭтаФорма, ТекущиеДанные);
	ПоказатьВопрос(Описание, 
					"Элемент и его подчиненные будут пропущены при сборке исходящего файла. Продолжить?", 
					РежимДиалогаВопрос.ДаНет, 
					,
					КодВозвратаДиалога.Да,
					"Пропустить элемент?");
					
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьПроверкуИзменение_Завершение(Результат, ТекущиеДанные) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТекущиеДанные.ПропуститьПроверку = Ложь;
	Иначе
		ТекущиеДанные.ВзятьИзОбъекта = НЕ ТекущиеДанные.ПропуститьПроверку;
		ТекущиеДанные.ВзятьИзВерсии1 = НЕ ТекущиеДанные.ПропуститьПроверку;
		ТекущиеДанные.ВзятьИзВерсии2 = НЕ ТекущиеДанные.ПропуститьПроверку;
		
		ТекущиеДанные.ВерсияXMLИсходящая = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



#Область СборкаИсходника

&НаКлиенте
Процедура СобратьИсходник(Команда)
	СобратьИсходникНаСервере();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИсходящиеДанные;
КонецПроцедуры

&НаСервере
Процедура СобратьИсходникНаСервере()
	
	ДеревоИзменений = ПолучитьИзВременногоХранилища(АдресДерева);
	
	КореньДерева = ДеревоИзменений.Строки[0];
	
	ФабрикаXDTOКонфигурации = ПолучитьФабрикуКонфигурации();
	ТипXDTO = ФабрикаXDTOКонфигурации.Тип("http://v8.1c.ru/8.3/MDClasses", "MetaDataObject");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Объект.ВерсияXML1);
	
	// Для костылей XDTO
	МассивПространстваИмен = Новый Массив;
	НумераторУзлов = 1; 
	Пока Чтение.Прочитать() Цикл
		Если НумераторУзлов = 1 Тогда
			ИмяПервогоУзла = Чтение.ЛокальноеИмя;
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Пока Чтение.ПрочитатьАтрибут() Цикл
					Если Чтение.ТипУзла = ТипУзлаXML.Атрибут Тогда
						ОписаниеАттрибута = Новый Структура("Имя, Префикс, Значение, Локальное");
						ОписаниеАттрибута.Имя = Чтение.Имя;
						ОписаниеАттрибута.Префикс = Чтение.Префикс;
						ОписаниеАттрибута.Значение = Чтение.Значение;
						ОписаниеАттрибута.Локальное = Чтение.ЛокальноеИмя;
						МассивПространстваИмен.Добавить(ОписаниеАттрибута);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			НумераторУзлов = 2; 
		Иначе
			ИмяВторогоУзла = Чтение.ЛокальноеИмя;
			Прервать;
		КонецЕсли;

	КонецЦикла;
	Чтение.Закрыть();
		
	
	// Костыли - XDTO, корневой элемент только anyType, 
	// по хорошему нужен {http://v8.1c.ru/8.3/MDClasses}MetaDataObject, 
	// но XDTO отказывается его принимать, либо такого типа не существует, либо нет такого пространства имен.
	// Можно сделаать через собственную XSD, но хз какие там объекты нужны,
	// проще слизать nameSpace с оригинала файла, путем замены см.ниже.
	// пока тестим так!

	СборкаXDTO = ФабрикаXDTOКонфигурации.Создать(ТипXDTO);


	ЗаполнитьДеревоЗначениямиФормыРекурсивно(КореньДерева, ДеревоИзмененийФормы.ПолучитьЭлементы()[0]);
	
	ФабрикаКонфигурации = ПолучитьФабрикуКонфигурации();
	СобратьXDTOРекурсивно(КореньДерева, СборкаXDTO, ФабрикаКонфигурации, МассивПространстваИмен);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяПервогоУзла);
	Для Каждого ИмяПространства Из МассивПространстваИмен Цикл
		Если ИмяПространства.Имя = "xmlns" Тогда
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(ИмяПространства.Префикс, ИмяПространства.Значение);
		Иначе
			ЗаписьXML.ЗаписатьАтрибут(ИмяПространства.Имя, ИмяПространства.Значение);
		КонецЕсли;
		
		
	КонецЦикла;
	
	ФабрикаКонфигурации.ЗаписатьXML(ЗаписьXML, СборкаXDTO[ИмяВторогоУзла]);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Объект.ИсходящийXML = ЗаписьXML.Закрыть();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначениямиФормыРекурсивно(СтрокаДерева, СтрокаФормы)
	
	ЭлементыФормы = СтрокаФормы.ПолучитьЭлементы();
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
		ЗначенияФормы = ЭлементыФормы[СтрокаДерева.Строки.Индекс(Строка)];
		ЗаполнитьЗначенияСвойств(Строка, ЗначенияФормы, "ВзятьИзОбъекта,ВзятьИзВерсии1,ВзятьИзВерсии2,ПропуститьПроверку");
		ЗаполнитьДеревоЗначениямиФормыРекурсивно(Строка, ЗначенияФормы);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура СобратьXDTOРекурсивно(ЭлементДерева, СборкаXDTO, ФабрикаКонфигурации, МассивПространстваИмен)
	
	Для Каждого СтрокаДерева Из ЭлементДерева.Строки Цикл
		
		Если СтрокаДерева.ПропуститьПроверку Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если СтрокаДерева.ВзятьИзОбъекта Тогда
			
			ПолеОбъект = "Объект";
			ПолеСвойство = "ОбъектСвойство";
			
		КонецЕсли;
		
		Если СтрокаДерева.ВзятьИзВерсии1 Тогда	
			
			ПолеОбъект = "ВерсияXML1";
			ПолеСвойство = "ВерсияXML1Свойство";
			
		КонецЕсли;

		Если СтрокаДерева.ВзятьИзВерсии2 Тогда	
			
			ПолеОбъект = "ВерсияXML2";
			ПолеСвойство = "ВерсияXML2Свойство";
			
		КонецЕсли;
		
		Если СтрокаДерева[ПолеСвойство] = Неопределено Тогда
			ВызватьИсключение "Поле Свойство не заполнено """ + СтрокаДерева.ИмяСтрокой + """";
		КонецЕсли;
		
		ИмяСвойстваВерсии = СтрокаДерева[ПолеСвойство].Имя;
		СвойствоВерсии = СтрокаДерева[ПолеСвойство];
		ОбъектВерсии = СтрокаДерева[ПолеОбъект];
		
		Сообщить(ИмяСвойстваВерсии + " / " + ТипЗнч(СборкаXDTO));
		
		
		Если ТипЗнч(СборкаXDTO) = Тип("СписокXDTO") Тогда
			Если СборкаXDTO.Владелец.Свойства().Получить(ИмяСвойстваВерсии) = Неопределено Тогда
				Тип = ФабрикаКонфигурации.Тип("http://v8.1c.ru/8.1/data/core", "LocalStringItemType");
				НовыйОбъект = ФабрикаКонфигурации.Создать(Тип);
				
				СборкаXDTO.Добавить("item", НовыйОбъект);
				
			Иначе
				Тип = СборкаXDTO.Владелец.Свойства().Получить(ИмяСвойстваВерсии).Тип;
				Если ТипЗнч(ОбъектВерсии) = Тип("ОбъектXDTO") Тогда
					НовыйОбъект = ФабрикаКонфигурации.Создать(Тип);
				Иначе
					НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
				КонецЕсли;
				СобратьXDTOРекурсивно(СтрокаДерева, НовыйОбъект, ФабрикаКонфигурации, МассивПространстваИмен);
			КонецЕсли;
			
			
			
			СборкаXDTO.Добавить(НовыйОбъект);
			
			Продолжить;
			
			
		ИначеЕсли ТипЗнч(СборкаXDTO) = Тип("ОбъектXDTO") Тогда
			
			Если ТипЗнч(СборкаXDTO[ИмяСвойстваВерсии]) = Тип("СписокXDTO") Тогда
				
				Если ТипЗнч(ОбъектВерсии) = Тип("СписокXDTO") Тогда
					СобратьXDTOРекурсивно(СтрокаДерева, СборкаXDTO.ПолучитьСписок(ИмяСвойстваВерсии), ФабрикаКонфигурации, МассивПространстваИмен);
				Иначе
					
					Тип = СборкаXDTO.Свойства().Получить(ИмяСвойстваВерсии).Тип;
					
					Если ТипЗнч(ОбъектВерсии) = Тип("ОбъектXDTO") Тогда
						НовыйОбъект = ФабрикаКонфигурации.Создать(Тип);
					ИначеЕсли Тип.Имя = "QName" Тогда
						
						ПрефиксЗначение = СтрРазделить(ОбъектВерсии, ":");
						ПространствоИмен = НайтиПространствоИменПоПрефиксу(ПрефиксЗначение[0], МассивПространстваИмен);
						qname = Новый РасширенноеИмяXML(ПространствоИмен, ПрефиксЗначение[1]);
						НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, qname);
						
						СборкаXDTO[ИмяСвойстваВерсии].Добавить(НовыйОбъект);
						
						Продолжить;
					ИначеЕсли СборкаXDTO.Свойства().Получить(ИмяСвойстваВерсии).Тип.Имя = "DataPath" Тогда
						Тип = ФабрикаКонфигурации.Тип("http://www.w3.org/2001/XMLSchema", "string");
						НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
						СборкаXDTO[ИмяСвойстваВерсии].Добавить(НовыйОбъект);
						Продолжить;
					ИначеЕсли СборкаXDTO.Свойства().Получить(ИмяСвойстваВерсии).ТипВладелец.Имя = "MDListType" Тогда
						Пространство = СборкаXDTO.Свойства().Получить(ИмяСвойстваВерсии).ТипВладелец.URIПространстваИмен;
						Тип = ФабрикаКонфигурации.Тип(Пространство, "MDObjectRef");
						НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
						СборкаXDTO[ИмяСвойстваВерсии].Добавить(НовыйОбъект);
						Продолжить;
							
					ИначеЕсли ЭтоAnyType(Тип) Тогда
						ПростойТип = ФабрикаКонфигурации.Тип("http://www.w3.org/2001/XMLSchema", "string");
						ПростоеЗначение = ФабрикаКонфигурации.Создать(ПростойТип, ОбъектВерсии);
						СборкаXDTO[ИмяСвойстваВерсии].Добавить(ПростоеЗначение);
						Продолжить;
					Иначе
						НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
					КонецЕсли;					
					
					
					СобратьXDTOРекурсивно(СтрокаДерева, НовыйОбъект, ФабрикаКонфигурации, МассивПространстваИмен);
					СборкаXDTO.ПолучитьСписок(ИмяСвойстваВерсии).Добавить(НовыйОбъект);
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			МассивНеопределено = Новый Массив;
			МассивНеопределено.Добавить("MaxValue");
			МассивНеопределено.Добавить("MinValue");
			МассивНеопределено.Добавить("FillValue");
			
			
			Тип = СборкаXDTO.Свойства().Получить(ИмяСвойстваВерсии).Тип;
			
			Если ТипЗнч(ОбъектВерсии) = Тип("ОбъектXDTO") Тогда
				НовыйОбъект = ФабрикаКонфигурации.Создать(Тип);
			Иначе
				Если Тип.Имя <> "anyType" Тогда
					НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
				Иначе
					
					Если ОбъектВерсии = Неопределено Тогда
						Если МассивНеопределено.Найти(ИмяСвойстваВерсии) <> Неопределено Тогда
							НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, Неопределено);
							НилТип = ФабрикаКонфигурации.Тип("http://www.w3.org/2001/XMLSchema", "boolean");
							Нил = ФабрикаКонфигурации.Создать(НилТип, Истина);
							НовыйОбъект.Добавить(ФормаXML.Атрибут, "http://www.w3.org/2001/XMLSchema-instance", "xsi:nil", Нил);
						Иначе
							НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, "");
						КонецЕсли;
					ИначеЕсли СборкаXDTO.ТИП().Имя = "ChoiceParameterItem" Тогда
						Если ТипЗнч(ОбъектВерсии) = Тип("Булево") Тогда
							Тип = ФабрикаКонфигурации.Тип("http://www.w3.org/2001/XMLSchema", "boolean");
							НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
						Иначе
							Тип = ФабрикаКонфигурации.Тип("http://v8.1c.ru/8.3/xcf/readable", "DesignTimeRef");
							НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
						КонецЕсли;
						
					ИначеЕсли ИмяСвойстваВерсии = "DataPath" Тогда
						
						Если ОбъектВерсии = "" Тогда
							Тип = ФабрикаКонфигурации.Тип("http://v8.1c.ru/8.3/xcf/readable", "DesignTimeRef");
							НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
						Иначе
							Тип = ФабрикаКонфигурации.Тип("http://www.w3.org/2001/XMLSchema", "string");
							НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
						КонецЕсли;	
					ИначеЕсли ИмяСвойстваВерсии = "FillValue" Или ИмяСвойстваВерсии = "TypesFilterValue" Тогда
						
						Если ОбъектВерсии = "" Тогда
							Тип = ФабрикаКонфигурации.Тип("http://www.w3.org/2001/XMLSchema", "string");
							НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
						Иначе
							Тип = ФабрикаКонфигурации.Тип("http://v8.1c.ru/8.3/xcf/readable", "DesignTimeRef");
							НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ОбъектВерсии) = Тип("Булево") тогда
						Тип = ФабрикаКонфигурации.Тип("http://www.w3.org/2001/XMLSchema", "boolean");
						НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
					ИначеЕсли ЭтоЧисло(ОбъектВерсии) Тогда
						Тип = ФабрикаКонфигурации.Тип("http://www.w3.org/2001/XMLSchema", "int");
						НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, Число(ОбъектВерсии));
					Иначе
						Тип = ФабрикаКонфигурации.Тип("http://www.w3.org/2001/XMLSchema", "string");
						НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
					КонецЕсли;
					 
				КонецЕсли;

			КонецЕсли;
			
			
			Если НовыйОбъект = Неопределено Тогда
				НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, "");
			КонецЕсли;
			
			
			СборкаXDTO.Установить(ИмяСвойстваВерсии, НовыйОбъект);
				
			
		Иначе
			
			Тип = СборкаXDTO.Свойства().Получить(ИмяСвойстваВерсии).Тип;
			НовыйОбъект = ФабрикаКонфигурации.Создать(Тип, ОбъектВерсии);
			СборкаXDTO.Установить(ИмяСвойстваВерсии, НовыйОбъект);
			
			
		КонецЕсли;	
			
		СобратьXDTOРекурсивно(СтрокаДерева, СборкаXDTO.ПолучитьXDTO(ИмяСвойстваВерсии), ФабрикаКонфигурации, МассивПространстваИмен);
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекст(Команда)
	
	Вложения = Новый Структура;
	ОписаниеОбработки.ПолучитьHTML(ТекстФорматаHTML, Вложения);
	
КонецПроцедуры

	
#КонецОбласти

&НаСервере
Функция ПолучитьФабрикуКонфигурации()
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(
		"<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:ent=""http://v8.1c.ru/8.1/data/enterprise"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
		|    <package targetNamespace=""http://v8.1c.ru/8.3/MDClasses"" elementFormQualified=""false"" attributeFormQualified=""false"">
		|    </package>
		|</Model>"
		);
	
	Возврат Новый ФабрикаXDTO(ФабрикаXDTO.ПрочитатьXML(Чтение));
КонецФункции

&НаСервере
Функция ЭтоAnyType(Тип)
	
	Если Тип.Имя = "string" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Тип.Имя <> "anyType" Тогда
		Если Тип.БазовыйТип <> Неопределено Тогда
			Возврат ЭтоAnyType(Тип.БазовыйТип);
		КонецЕсли;
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НайтиПространствоИменПоПрефиксу(Префикс, МассивПространстваИмен)
	
	Для Каждого Пространство Из МассивПространстваИмен Цикл
		Если Пространство.Локальное = Префикс тогда
			Возврат Пространство.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ЭтоЧисло(ОбъектПроверки)
	Попытка 
		Число = Число(ОбъектПроверки);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

	


